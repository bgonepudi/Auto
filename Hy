# Initialize an array to store the output data
$outputData = @()

# Initialize a counter for loop number
$loopNumber = 1

# Loop through each region in the JSON content
foreach ($region in $jsonContent.REGIONS) {
    $regionName = $region.Region
    $runs = $region.Runs
    $query = $region.QUERY

    # Display the loop number and region
    Write-Host "Processing Loop Number: $loopNumber for Region: $regionName and Runs: $runs"

    # Check if runs is equal to "Y"
    if ($runs -eq "Y") {
        try {
            # Construct the connection string (update as necessary)
            $connectionString = "Data Source=$regionName;Initial Catalog=FACETS;Integrated Security=SSPI;"

            # Create a new SQL connection using the Windows Authentication connection string
            $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
            $connection.Open()

            # Create and execute the SQL command
            $command = $connection.CreateCommand()
            $command.CommandText = $query
            $reader = $command.ExecuteReader()

            # Process the results
            while ($reader.Read()) {
                $grgr_ck = $reader["GRGR_CK"]
                $regionValue = $reader["Region"]
                $membership = $reader["Membership"]
                $run_date = Get-Date -Format "yyyy-MM-dd"
                $creation = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

                # Close the reader before executing the INSERT command
                $reader.Close()

                # Prepare the INSERT statement
                $insertCommand = $connection.CreateCommand()
                $insertCommand.CommandText = "
                    INSERT INTO ta_reporting.enrollment_audit (grgr_ck, region, membership, run_date, creation)
                    VALUES ($grgr_ck, '$regionValue', $membership, '$run_date', '$creation')
                "
                $insertCommand.ExecuteNonQuery() # Execute the INSERT command

                # Optionally, reopen the reader if you need to continue processing
                $reader = $command.ExecuteReader()

                # Optionally, add the result to the output array for further processing
                $result = @{
                    "GRGR_CK" = $grgr_ck
                    "Region" = $regionValue
                    "Membership" = $membership
                    "RunDate" = $run_date
                    "Creation" = $creation
                }
                $outputData += [PSCustomObject]$result
            }
        } catch {
            Write-Host "Error executing query for region $regionName $_"
            $global:Fail++
            $overall_status_parsed = 'false'
        } finally {
            if ($reader) { $reader.Close() }
            $connection.Close()
            $global:PASS++
            $overall_status_parsed = 'true'
        }
    } else {
        Write-Host "Skipping region $regionName as Runs is not 'Y'"
    }

    # Increment the loop number after each region
    $loopNumber++
}

# Output the data if needed (for example, to a CSV file)
$outputData | Export-Csv -Path "C:\repo\BG_Tasks\outputData.csv" -NoTypeInformation

# Optionally, display the output data in the console
$outputData | Format-Table -AutoSize
