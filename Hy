# Initialize an array to store the output data
$outputData = @()

# Loop through each region and group in the JSON content
foreach ($region in $jsonContent.REGIONS) {
    $regionName = $region.Region
    $serverName = $region.Region
    $databaseName = "Facets"
    $runs = $region.Runs
    foreach ($group in $region.QUERY) {
        $grgr_name = $group.GRGR_NAME
        $grgr_id = $group.GRGR_ID
        $grgr_state = $group.GRGR_STATE
        $run = $group.Run
        $serverName = $region.Region
        $databaseName = "Facets"
        $runs = $region.Runs

        if ($runs -eq "Y") {
            $query = $group.QUERY

            try {
                # Create a new SQL connection using the Windows Authentication connection string
                $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
                $connection.Open()

                # Create and execute the SQL command
                $command = $connection.CreateCommand()
                $command.CommandText = $query
                $reader = $command.ExecuteReader()

                # Process the results
                while ($reader.Read()) {
                    # Initialize a hashtable to store the current row
                    $result = @{}
                    
                    # Loop through each column in the reader and add it to the hashtable
                    for ($i = 0; $i -lt $reader.FieldCount; $i++) {
                        $columnName = $reader.GetName($i)
                        $columnValue = $reader[$i]
                        $result[$columnName] = $columnValue
                    }

                    # Add region-related information to the result
                    $result["Region"] = $regionName
                    $result["GRGR_NAME"] = $grgr_name
                    $result["GRGR_ID"] = $grgr_id
                    $result["GRGR_STATE"] = $grgr_state
                    $result["Run"] = $run

                    # Add the row to the output data array
                    $outputData += [PSCustomObject]$result
                }
            } catch {
                Write-Host "Error executing query for region $regionName and group $grgr_name: $_"
            } finally {
                $connection.Close()
            }
        }
    }
}

# Output the data if needed
$outputData
