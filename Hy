# Load the JSON file
$jsonFilePath = "C:\path\to\your\file.json"
$jsonContent = Get-Content -Path $jsonFilePath | ConvertFrom-Json

# Initialize an array to store the output data
$outputData = @()

# Loop through each region in the JSON content
foreach ($region in $jsonContent.REGIONS) {
    $regionName = $region.Region
    $serverName = $region.ServerName
    $databaseName = $region.DatabaseName
    
    # Construct the connection string for Windows Authentication
    $connectionString = "Server=$serverName;Database=$databaseName;Integrated Security=True;"
    
    # Loop through each group in the current region
    foreach ($group in $region.Groups) {
        $run = $group.Run
        $grgr_name = $group.GRGR_NAME
        $grgr_id = $group.GRGR_ID
        $grgr_state = $group.GRGR_STATE
        
        if ($run -eq "Y") {
            $query = $group.QUERY
            
            # Create a new SQL connection using the Windows Authentication connection string
            $connection = New-Object System.Data.SqlClient.SqlConnection
            $connection.ConnectionString = $connectionString
            $connection.Open()
            
            # Create and execute the SQL command
            $command = $connection.CreateCommand()
            $command.CommandText = $query
            $reader = $command.ExecuteReader()
            
            # Process the results
            while ($reader.Read()) {
                # Initialize a hashtable to store the current row
                $result = @{}
                
                # Loop through each column in the reader and add it to the hashtable
                for ($i = 0; $i -lt $reader.FieldCount; $i++) {
                    $columnName = $reader.GetName($i)
                    $columnValue = $reader[$i]
                    $result[$columnName] = $columnValue
                }
                
                # Add region-related information to the result
                $result["Region"] = $regionName
                $result["GRGR_NAME"] = $grgr_name
                $result["GRGR_ID"] = $grgr_id
                $result["GRGR_STATE"] = $grgr_state
                $result["Run"] = $run
                
                # Add the row to the output data array
                $outputData += [PSCustomObject]$result
            }
            
            # Close the SQL connection
            $connection.Close()
        }
    }
}

# Display the data in a table format in the console
$outputData | Format-Table -AutoSize

# Optionally, export the results to a CSV file
$outputData | Export-Csv -Path "C:\path\to\output\results.csv" -NoTypeInformation

# Optionally, export the results to a JSON file
$outputData | ConvertTo-Json -Depth 3 | Out-File "C:\path\to\output\results.json"
