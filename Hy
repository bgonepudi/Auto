import json
import csv
import re
from datetime import datetime

# File paths
json_file_path = r"C:\repo\json\PROD\PA.json"  # Update this path
output_csv_path = r"C:\repo\json\PROD\PA_output.csv"  # Update this path

# Load JSON data
try:
    with open(json_file_path) as json_file:
        jsondata = json.load(json_file)
except FileNotFoundError:
    print(f"File not found: {json_file_path}")
    exit(1)
except json.JSONDecodeError:
    print(f"Error decoding JSON from file: {json_file_path}")
    exit(1)

# Function to flatten JSON and extract key-value pairs
def flatten_json(y):
    out = {}

    def flatten(x, name='', parent=None):
        if isinstance(x, dict):
            for a in x:
                flatten(x[a], name + a + '.', parent=x)
        elif isinstance(x, list):
            if len(x) == 0:
                out[name[:-1]] = []
            else:
                for i, a in enumerate(x):
                    flatten(a, name + str(i) + '.', parent=x)
        else:
            out[name[:-1]] = x

    flatten(y)
    return out

# Ensure jsondata is a list
if isinstance(jsondata, dict):
    jsondata = [jsondata]

# Flatten each entry in jsondata
flattened_data = []
for entry in jsondata:
    flattened = flatten_json(entry)
    rows = []
    for k, v in flattened.items():
        if isinstance(v, list):
            if len(v) == 0:
                rows.append({k: ""})
            else:
                for item in v:
                    row = {k: item}
                    rows.append(row)
        else:
            if len(rows) == 0:
                rows.append({k: v})
            else:
                for row in rows:
                    row[k] = v
    for row in rows:
        flattened_data.append(row)

# Ensure each row has all headers, copying previous values if necessary
unique_headers = sorted(set(key for data in flattened_data for key in data.keys()))
for row in flattened_data:
    for header in unique_headers:
        if header not in row:
            row[header] = ""

# Write to CSV
try:
    with open(output_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=unique_headers)
        writer.writeheader()
        previous_row = {header: "" for header in unique_headers}
        for row in flattened_data:
            for header in unique_headers:
                if row[header] == "":
                    row[header] = previous_row[header]
                else:
                    previous_row[header] = row[header]
            writer.writerow(row)
    print(f"Data successfully written to {output_csv_path}")
except IOError:
    print(f"Error writing to file: {output_csv_path}")
