# Define connection strings for both servers
$connectionString1 = "Server=Server1;Database=Database1;Integrated Security=True;"
$connectionString2 = "Server=Server2;Database=Database2;Integrated Security=True;"

# Define the query you want to run
$query = "SELECT * FROM TableName ORDER BY PrimaryKeyColumn;"

# Function to execute the SQL query and return results
function Get-SQLData {
    param (
        [string]$connectionString,
        [string]$query
    )

    # Create a SQL connection
    $connection = New-Object System.Data.SqlClient.SqlConnection
    $connection.ConnectionString = $connectionString
    $connection.Open()

    # Create a SQL command
    $command = $connection.CreateCommand()
    $command.CommandText = $query

    # Execute the SQL command
    $adapter = New-Object System.Data.SqlClient.SqlDataAdapter $command
    $dataTable = New-Object System.Data.DataTable
    $adapter.Fill($dataTable)

    # Close the connection
    $connection.Close()

    # Return the DataTable
    return $dataTable
}

# Fetch data from both tables
$dataTable1 = Get-SQLData -connectionString $connectionString1 -query $query
$dataTable2 = Get-SQLData -connectionString $connectionString2 -query $query

# Compare the two DataTables
# Note: PowerShell doesnâ€™t have an exact equivalent to pandas' 'compare' method. Instead, you can use manual comparison.

# Convert DataTables to JSON for easier comparison
$json1 = $dataTable1 | ConvertTo-Json
$json2 = $dataTable2 | him ConvertTo-Json

# Compare the two JSON strings
if ($json1 -ne $json2) {
    Write-Host "Tables are different"
} else {
    Write-Host "Tables are identical"
}
